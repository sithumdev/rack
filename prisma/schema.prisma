generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                       Int                @id @default(autoincrement())
  name                     String             @db.VarChar(255)
  email                    String             @unique @db.VarChar(255)
  avatar                   String?            @db.VarChar(255)
  isActive                 Boolean            @default(true)
  emailVerified            Boolean            @default(false)
  createdAt                DateTime           @default(now()) @db.Timestamp(6)
  updatedAt                DateTime           @updatedAt
  notificationEnabled      Boolean            @default(false)
  notificationToken        String?
  type                     USER_TYPE
  createdCategories        Category[]         @relation("CategoriesCreatedBy")
  updatedCategories        Category[]         @relation("CategoriesUpdatedBy")
  createdInventories       Inventory[]        @relation("InventoriesCreatedBy")
  updatedInventories       Inventory[]        @relation("InventoriesUpdatedBy")
  createdMobileInventories MobileInventory[]  @relation("MobileInventoriesCreatedBy")
  updatedMobileInventories MobileInventory[]  @relation("MobileInventoriesUpdatedBy")
  createdProducts          Product[]          @relation("ProductsCreatedBy")
  updatedProducts          Product[]          @relation("ProductsUpdatedBy")
  createdPurchases         Purchase[]         @relation("PurchaseCreatedBy")
  updatedPurchases         Purchase[]         @relation("PurchaseUpdatedBy")
  createdPurchaseItems     PurchaseItem[]     @relation("CreatedPurchaseItems")
  updatedPurchaseItems     PurchaseItem[]     @relation("UpdatedPurchaseItems")
  createdReleases          Release[]          @relation("ReleaseCreatedBy")
  updatedReleases          Release[]          @relation("ReleaseUpdatedBy")
  createdReleaseItems      ReleaseItem[]      @relation("CreatedReleaseItems")
  updatedReleaseItems      ReleaseItem[]      @relation("UpdatedReleaseItems")
  createdSalesRepCustomers SalesRepCustomer[] @relation("CreatedSalesRepCustomers")
  updatedSalesRepCustomers SalesRepCustomer[] @relation("UpdatedSalesRepCustomers")
  createdSalesRepPurchases SalesRepPurchase[] @relation("SalesRepPurchaseCreatedBy")
  updatedSalesRepPurchases SalesRepPurchase[] @relation("SalesRepPurchaseUpdatedBy")
  createdSalesRepRoutes    SalesRepRoute[]    @relation("CreatedSalesRepRoutes")
  updatedSalesRepRoutes    SalesRepRoute[]    @relation("UpdatedSalesRepRoutes")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  createdById Int
  updatedById Int
  createdBy   User      @relation("CategoriesCreatedBy", fields: [createdById], references: [id])
  updatedBy   User      @relation("CategoriesUpdatedBy", fields: [updatedById], references: [id])
  products    Product[]
}

model Product {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  description       String?
  createdAt         DateTime          @default(now()) @db.Timestamp(6)
  updatedAt         DateTime          @updatedAt
  createdById       Int
  updatedById       Int
  barcode           String            @unique
  price             Int
  weight            Int
  categoryId        Int
  inventories       Inventory[]       @relation("ProductsToInventory")
  mobileInventories MobileInventory[] @relation("ProductsToMobileInventory")
  category          Category          @relation(fields: [categoryId], references: [id])
  createdBy         User              @relation("ProductsCreatedBy", fields: [createdById], references: [id])
  updatedBy         User              @relation("ProductsUpdatedBy", fields: [updatedById], references: [id])
}

model Inventory {
  id           Int            @id @default(autoincrement())
  mrp          Int
  sellingPrice Int
  sku          String
  available    Int
  sold         Int
  defective    Int
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @updatedAt
  createdById  Int
  updatedById  Int
  productId    Int
  createdBy    User           @relation("InventoriesCreatedBy", fields: [createdById], references: [id])
  product      Product        @relation("ProductsToInventory", fields: [productId], references: [id])
  updatedBy    User           @relation("InventoriesUpdatedBy", fields: [updatedById], references: [id])
  purchases    PurchaseItem[] @relation("InventoryToPurchase")
  releases     ReleaseItem[]  @relation("InventoryToRelease")
}

model Purchase {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now()) @db.Timestamp(6)
  updatedAt   DateTime       @updatedAt
  createdById Int
  updatedById Int
  createdBy   User           @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  updatedBy   User           @relation("PurchaseUpdatedBy", fields: [updatedById], references: [id])
  items       PurchaseItem[] @relation("PurchaseToItem")
}

model PurchaseItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  createdById Int
  updatedById Int
  purchaseId  Int
  inventoryId Int
  createdBy   User      @relation("CreatedPurchaseItems", fields: [createdById], references: [id])
  inventory   Inventory @relation("InventoryToPurchase", fields: [inventoryId], references: [id])
  purchase    Purchase  @relation("PurchaseToItem", fields: [purchaseId], references: [id])
  updatedBy   User      @relation("UpdatedPurchaseItems", fields: [updatedById], references: [id])
}

model Release {
  id          Int           @id @default(autoincrement())
  whom        String
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt
  createdById Int
  updatedById Int
  createdBy   User          @relation("ReleaseCreatedBy", fields: [createdById], references: [id])
  updatedBy   User          @relation("ReleaseUpdatedBy", fields: [updatedById], references: [id])
  releases    ReleaseItem[] @relation("ReleaseToItem")
}

model ReleaseItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  createdById Int
  updatedById Int
  releaseId   Int
  inventoryId Int
  createdBy   User      @relation("CreatedReleaseItems", fields: [createdById], references: [id])
  inventory   Inventory @relation("InventoryToRelease", fields: [inventoryId], references: [id])
  release     Release   @relation("ReleaseToItem", fields: [releaseId], references: [id])
  updatedBy   User      @relation("UpdatedReleaseItems", fields: [updatedById], references: [id])
}

model ProductReporting {
  id        Int      @id @default(autoincrement())
  productId Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  count     Int
  whom      String
}

model AuditDifference {
  id             Int            @id @default(autoincrement())
  lhs            String
  rhs            String
  path           String
  auditId        Int
  InventoryAudit InventoryAudit @relation(fields: [auditId], references: [id])
}

model InventoryAudit {
  id              Int               @id @default(autoincrement())
  action          AUDIT_ACTION
  performedById   Int
  performedBy     String
  performedAt     DateTime          @default(now()) @db.Timestamp(6)
  inventoryId     Int
  mrp             Int
  productName     String
  AuditDifference AuditDifference[]
}

model Issue {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt
  issuer     Issuer
  customerId Int
  salesRepId Int
  customer   Customer @relation("IssueToCustomer", fields: [customerId], references: [id])
  salesRep   SalesRep @relation("IssueToSalesrep", fields: [salesRepId], references: [id])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  issues    Issue[]  @relation("IssueToCustomer")
}

model SalesRep {
  id          Int                      @id @default(autoincrement())
  name        String
  createdAt   DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt   DateTime                 @updatedAt
  customers   CustomersOnSalesReps[]
  inventories InventoriesOnSalesReps[]
  issues      Issue[]                  @relation("IssueToSalesrep")
  routes      RoutesOnSalesReps[]
  purchases   SalesRepPurchase[]       @relation("PurchaseToSalesRep")
}

model MobileInventory {
  id                 Int                      @id @default(autoincrement())
  mrp                Int
  sellingPrice       Int
  sku                String
  available          Int
  sold               Int
  defective          Int
  createdAt          DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt          DateTime                 @updatedAt
  createdById        Int
  updatedById        Int
  productId          Int
  depreciated        Boolean                  @default(false)
  salesReps          InventoriesOnSalesReps[]
  createdBy          User                     @relation("MobileInventoriesCreatedBy", fields: [createdById], references: [id])
  product            Product                  @relation("ProductsToMobileInventory", fields: [productId], references: [id])
  updatedBy          User                     @relation("MobileInventoriesUpdatedBy", fields: [updatedById], references: [id])
  salesPurchaseItems SalesRepPurchaseItem[]   @relation("MobileInventoryToPurchase")
}

model InventoriesOnSalesReps {
  inventoryId Int
  salesRepId  Int
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
  updatedAt   DateTime        @updatedAt
  inventory   MobileInventory @relation(fields: [inventoryId], references: [id])
  salesRep    SalesRep        @relation(fields: [salesRepId], references: [id])

  @@id([salesRepId, inventoryId])
}

model SalesRepPurchase {
  id          Int                    @id @default(autoincrement())
  createdAt   DateTime               @default(now()) @db.Timestamp(6)
  updatedAt   DateTime               @updatedAt
  createdById Int
  updatedById Int
  salesRepId  Int
  createdBy   User                   @relation("SalesRepPurchaseCreatedBy", fields: [createdById], references: [id])
  salesRep    SalesRep               @relation("PurchaseToSalesRep", fields: [salesRepId], references: [id])
  updatedBy   User                   @relation("SalesRepPurchaseUpdatedBy", fields: [updatedById], references: [id])
  items       SalesRepPurchaseItem[] @relation("SalesRepPurchaseToItem")
}

model SalesRepPurchaseItem {
  id          Int              @id @default(autoincrement())
  quantity    Int
  createdAt   DateTime         @default(now()) @db.Timestamp(6)
  updatedAt   DateTime         @updatedAt
  purchaseId  Int
  inventoryId Int
  inventory   MobileInventory  @relation("MobileInventoryToPurchase", fields: [inventoryId], references: [id])
  purchase    SalesRepPurchase @relation("SalesRepPurchaseToItem", fields: [purchaseId], references: [id])
}

model SalesRepCustomer {
  id          Int                    @id @default(autoincrement())
  name        String
  city        String
  address     String
  phone       String
  totalCredit Int                    @default(0)
  createdAt   DateTime               @default(now()) @db.Timestamp(6)
  updatedAt   DateTime               @updatedAt
  createdById Int
  updatedById Int
  salesReps   CustomersOnSalesReps[]
  createdBy   User                   @relation("CreatedSalesRepCustomers", fields: [createdById], references: [id])
  updatedBy   User                   @relation("UpdatedSalesRepCustomers", fields: [updatedById], references: [id])
}

model CustomersOnSalesReps {
  salesRepId Int
  customerId Int
  createdAt  DateTime         @default(now()) @db.Timestamp(6)
  updatedAt  DateTime         @updatedAt
  customer   SalesRepCustomer @relation(fields: [customerId], references: [id])
  salesRep   SalesRep         @relation(fields: [salesRepId], references: [id])

  @@id([customerId, salesRepId])
}

model SalesRepRoute {
  id          Int                 @id @default(autoincrement())
  name        String
  cities      String[]
  notes       String?
  createdAt   DateTime            @default(now()) @db.Timestamp(6)
  updatedAt   DateTime            @updatedAt
  createdById Int
  updatedById Int
  salesReps   RoutesOnSalesReps[]
  createdBy   User                @relation("CreatedSalesRepRoutes", fields: [createdById], references: [id])
  updatedBy   User                @relation("UpdatedSalesRepRoutes", fields: [updatedById], references: [id])
}

model RoutesOnSalesReps {
  salesRepId Int
  routeId    Int
  createdAt  DateTime      @default(now()) @db.Timestamp(6)
  updatedAt  DateTime      @updatedAt
  route      SalesRepRoute @relation(fields: [routeId], references: [id])
  salesRep   SalesRep      @relation(fields: [salesRepId], references: [id])

  @@id([routeId, salesRepId])
}

enum USER_TYPE {
  OWNER
  MANAGER
  EMPLOYEE
  SUPPLIER
}

enum AUDIT_ACTION {
  CREATE
  UPDATE
  DELETE
}

enum Issuer {
  SALES_REP
  CUSTOMER
  REPACK
}
